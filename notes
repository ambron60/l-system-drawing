def rules(sequence):
    if sequence == "A":  # rule 1
        return "AB"
    elif sequence == "B":  # rule 2
        return "A"
    else:
        return None

def fibostrings(sequence):
    if sequence == "A":  # rule 1
        return "AB"
    elif sequence == "B":  # rule 2
        return "A"
    else:
        return None


in main():

    #print(derivation("B", 7)) # fibostrings


set_turtle()
model = derivation("L", 5) # axiom, nth iterations
draw_l_system(t, model[-1], 5, 90)  # draw model (turtle, generator, segment length, angle)
ts.exitonclick()

def rules(sequence):
    if sequence == "L":
        return "+RF-LFL-FR+"
    elif sequence == "R":
        return "-LF+RFR+FL-"
    elif sequence == "f":
        return "ffffff"
    else:
        return sequence

Koch Curve:

L-System notes -> {'F': 'F+F--F+F'}

Enter axiom (initial string): F
Enter number of iterations (n): 4
Enter step size (segment length): 5
Enter angle: 60

Koch Snowflake:

Same as above except: axiom (initial string): F--F--F
